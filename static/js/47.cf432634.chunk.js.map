{"version":3,"sources":["components/CoinDetails/TradePanel/index.tsx","components/CoinDetails/TradePanel/TradePanel.tsx","pages/CoinDetailsPage/index.tsx","pages/CoinDetailsPage/CoinDetailsPage.tsx"],"names":["TradePanel","useTheme","t","useTranslation","ButtonGroup","size","vertical","Button","onClick","alert","variant","className","symbol","CoinDetailsPage","Page","title"],"mappings":"oMACeA,ECaW,WACXC,cAAd,IACQC,EAAMC,cAAND,EAuER,OACC,8BAwBC,eAACE,EAAA,EAAD,CAAaC,KAAK,KAAKC,UAAQ,EAA/B,UAGC,cAACC,EAAA,EAAD,CAAQC,QAjDM,WAChBC,MAAM,WAgDuBC,QAAQ,UAAnC,SACER,EAAE,oBAGJ,cAACK,EAAA,EAAD,CAAQC,QAjDG,WACbC,MAAM,QAgDoBC,QAAQ,UAAUC,UAAU,OAApD,SACET,EAAE,iBAGJ,cAACK,EAAA,EAAD,CAAQC,QA/CI,WACdC,MAAM,SA8CqBC,QAAQ,OAAOC,UAAU,OAAlD,SACET,EAAE,kBAGJ,cAACK,EAAA,EAAD,CAAQC,QA7CO,WACjBC,MAAM,YA4CwBC,QAAQ,SAASC,UAAU,OAAvD,SACET,EAAE,oBAAqB,CAAEU,OAAQ,iBC/HxBC,UCGgB,WAC9B,OACC,cAACC,EAAA,EAAD,CAAMC,MAAO,eAAb,SAEC,cAAC,EAAD","file":"static/js/47.cf432634.chunk.js","sourcesContent":["import { TradePanel } from \"./TradePanel\";\nexport default TradePanel;\n","// import Web3 from \"web3\";\n// import { Web3Wrapper } from \"@0x/web3-wrapper\";\n// import { ERC20TokenContract } from \"@0x/contract-wrappers\";\n// import toast from \"react-hot-toast\";\n// import { UNLIMITED_ALLOWANCE_IN_BASE_UNITS } from \"../../constants\";\n// import { getContractWrappers } from \"../../utils/spot/contractWrapper\";\nimport { useTranslation } from \"react-i18next\";\nimport { Button, ButtonGroup } from \"react-bootstrap\";\nimport CurrencyText from \"../../CurrencyText\";\n// import UnlockModal from \"../UnlockModal\";\nimport GradientButton from \"../../UI/Button\";\nimport useTheme from \"../../../hooks/useTheme\";\nimport * as Styled from \"./styleds\";\n\nexport const TradePanel = () => {\n\tconst theme = useTheme();\n\tconst { t } = useTranslation();\n\t// const [unlocking, setUnlocking] = useState(false);\n\t// const [showUnlockModal, setShowUnlockModal] = useState(false);\n\n\t// let web3;\n\t// let web3Wrapper;\n\n\t// useEffect(() => {\n\t// \tweb3 = new Web3(Web3.givenProvider || new Web3.providers.HttpProvider(process.env.REACT_APP_NETWORK_URL));\n\t// \tif (web3.currentProvider) {\n\t// \t\tweb3Wrapper = new Web3Wrapper(web3.currentProvider);\n\t// \t}\n\t// }, []);\n\n\t// const unlockHandler = async (token) => {\n\t// \tsetShowUnlockModal(true);\n\t// \ttry {\n\t// \t\tif (token.address) {\n\t// \t\t\tconst contractWrappers = await getContractWrappers(web3.currentProvider || window.ethereum);\n\t// \t\t\tconst approveAddress = token.address ? token.address : contractWrappers.contractAddresses.erc20Proxy;\n\n\t// \t\t\tconst erc20Token = new ERC20TokenContract(token.address, contractWrappers.getProvider());\n\t// \t\t\tconst amount = UNLIMITED_ALLOWANCE_IN_BASE_UNITS;\n\n\t// \t\t\tconst tx = await erc20Token.approve(approveAddress, amount).sendTransactionAsync({\n\t// \t\t\t\tfrom: account,\n\t// \t\t\t});\n\t// \t\t\tsetUnlocking(true);\n\t// \t\t\tawait web3Wrapper.awaitTransactionSuccessAsync(tx);\n\n\t// \t\t\tif (tx) {\n\t// \t\t\t\tsetUnlocking(false);\n\t// \t\t\t\tsetDone(true);\n\t// \t\t\t}\n\t// \t\t} else if (token.symbol === \"ETH\") {\n\t// \t\t\tthrow new Error(\"Unnecessary Approve for ethereum\");\n\t// \t\t} else {\n\t// \t\t\tthrow new Error(\"Token is invalid\");\n\t// \t\t}\n\t// \t} catch (e) {\n\t// \t\ttoast.error(\"Unnecessary Approve for ethereum or token is invalid\");\n\t// \t\tsetUnlocking(false);\n\t// \t\tsetShowUnlockModal(false);\n\t// \t\tsetDone(false);\n\t// \t}\n\t// };\n\n\t// const isLoading = row.loading || false;\n\t// const value = row.balanceUSD * (currenciesRate[\"BTC\"] || 1);\n\n\tconst onUnlock = () => {\n\t\talert(\"Unlock\");\n\t};\n\n\tconst onBuy = () => {\n\t\talert(\"Buy\");\n\t\t/* href={`/#/exchange?outputCurrency=${row.metadata.symbol === \"ETH\" ? \"ETH\" : row.metadata.address}`} */\n\t\t// to={`/exchange?outputCurrency=${selected.contract_address}`}\n\t};\n\n\tconst onSell = () => {\n\t\talert(\"Sell\");\n\t\t/* href={`/#/exchange?inputCurrency=${row.metadata.symbol === \"ETH\" ? \"ETH\" : row.metadata.address}`} */\n\t\t// to={`/exchange?inputCurrency=${selected.contract_address}`}\n\t};\n\n\tconst onConvert = () => {\n\t\talert(\"Convert\");\n\t\t/* href={`/#/exchange?inputCurrency=${row.metadata.symbol === \"ETH\" ? \"ETH\" : row.metadata.address}&outputCurrency=0x7240aC91f01233BaAf8b064248E80feaA5912BA3`} */\n\t};\n\n\treturn (\n\t\t<div>\n\t\t\t{/* <UnlockModal\n\t\t\t\tdone={done}\n\t\t\t\tshow={showUnlockModal}\n\t\t\t\tunlocking={unlocking}\n\t\t\t\tonDismiss={() => {\n\t\t\t\t\tsetDone(false);\n\t\t\t\t\tsetUnlocking(false);\n\t\t\t\t\tsetShowUnlockModal(false);\n\t\t\t\t}}\n\t\t\t/> */}\n\n\t\t\t{/* {selected && walletBalance > 0 && (\n\t\t\t\t<Styled.BalanceCard>\n\t\t\t\t\t<div className=\"d-flex flex-column flex-lg-row align-items-stretch align-items-lg-center justify-content-between\">\n\t\t\t\t\t\t<Styled.BalanceText>Your \"{selected.name}\" Balance</Styled.BalanceText>\n\t\t\t\t\t\t<Styled.BalanceValue>\n\t\t\t\t\t\t\t{selected.symbol.toUpperCase()} {walletBalance.toFixed(6)} (\n\t\t\t\t\t\t\t<CurrencyText value={walletBalance * selected.market_data.current_price.usd} />)\n\t\t\t\t\t\t</Styled.BalanceValue>\n\t\t\t\t\t</div>\n\t\t\t\t</Styled.BalanceCard>\n\t\t\t)} */}\n\n\t\t\t<ButtonGroup size=\"lg\" vertical>\n\t\t\t\t{/* onClick={() => unlockHandler(row.metadata)} */}\n\t\t\t\t{/* disabled={row.metadata.symbol === \"ETH\"} */}\n\t\t\t\t<Button onClick={onUnlock} variant=\"warning\">\n\t\t\t\t\t{t(\"buttons.unlock\")}\n\t\t\t\t</Button>\n\n\t\t\t\t<Button onClick={onBuy} variant=\"primary\" className=\"mt-1\">\n\t\t\t\t\t{t(\"buttons.buy\")}\n\t\t\t\t</Button>\n\n\t\t\t\t<Button onClick={onSell} variant=\"info\" className=\"mt-1\">\n\t\t\t\t\t{t(\"buttons.sell\")}\n\t\t\t\t</Button>\n\n\t\t\t\t<Button onClick={onConvert} variant=\"danger\" className=\"mt-1\">\n\t\t\t\t\t{t(\"buttons.convertTo\", { symbol: \"OCTO\" })}\n\t\t\t\t</Button>\n\t\t\t</ButtonGroup>\n\t\t</div>\n\t);\n};\n","import { CoinDetailsPage } from \"./CoinDetailsPage\";\nexport default CoinDetailsPage;\n","import Page from \"../../components/Page\";\n// import CoinDetails from \"../../components/CoinDetails\";\nimport TradePanel from \"../../components/CoinDetails/TradePanel\";\n\nexport const CoinDetailsPage = () => {\n\treturn (\n\t\t<Page title={\"Coin Details\"}>\n\t\t\t{/* <CoinDetails /> */}\n\t\t\t<TradePanel />\n\t\t</Page>\n\t);\n};\n"],"sourceRoot":""}