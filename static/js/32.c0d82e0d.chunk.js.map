{"version":3,"sources":["../node_modules/@restart/ui/esm/NoopTransition.js","../node_modules/@restart/ui/esm/TabPanel.js","../node_modules/@restart/ui/esm/Tabs.js","../node_modules/react-bootstrap/esm/getTabTransitionComponent.js","../node_modules/react-bootstrap/esm/TabContainer.js","../node_modules/react-bootstrap/esm/TabContent.js","../node_modules/react-bootstrap/esm/TabPane.js","../node_modules/react-bootstrap/esm/Tab.js","../node_modules/react-feather/dist/icons/alert-triangle.js","../node_modules/react-feather/dist/icons/arrow-up-circle.js","../../../../src/react/context/ApolloContext.ts","../../../../src/react/context/ApolloProvider.tsx","../../../../src/react/parser/index.ts","../../../../src/react/data/OperationData.ts","../../../../src/react/data/QueryData.ts","../../../../../src/react/hooks/utils/useBaseQuery.ts","../../../../../src/react/hooks/utils/useDeepMemo.ts","../../../../../src/react/hooks/utils/useAfterFastRefresh.ts","../../../../src/react/hooks/useQuery.ts"],"names":["NoopTransition","children","inProp","in","mountOnEnter","unmountOnExit","hasEnteredRef","useRef","useEffect","current","_excluded","_excluded2","_excluded3","_objectWithoutPropertiesLoose","source","excluded","key","i","target","sourceKeys","Object","keys","length","indexOf","useTabPanel","_ref","active","eventKey","transition","props","context","useContext","TabContext","isActive","activeKey","getControlledId","getControllerId","rest","makeEventKey","assign","id","TabPanel","React","_ref2","ref","as","Component","tabPanelProps","onEnter","onEntering","onEntered","onExit","onExiting","onExited","Transition","_jsx","Provider","value","SelectableContext","role","hidden","displayName","Tabs","userId","generateCustomChildId","generateChildId","propsOnSelect","onSelect","propsActiveKey","defaultActiveKey","useUncontrolledProp","useSSRSafeId","useMemo","type","tabContext","Panel","getTabTransitionComponent","Fade","undefined","TabContainer","createWithBsPrefix","TabPane","bsPrefix","className","prefix","useBootstrapPrefix","classNames","propTypes","PropTypes","oneOfType","string","number","title","node","isRequired","disabled","bool","tabClassName","Tab","Error","Container","Content","TabContent","Pane","_extends","arguments","prototype","hasOwnProperty","call","apply","this","_objectWithoutProperties","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","AlertTriangle","forwardRef","_ref$color","color","_ref$size","size","createElement","xmlns","width","height","viewBox","fill","stroke","strokeWidth","strokeLinecap","strokeLinejoin","d","x1","y1","x2","y2","ArrowUpCircle","cx","cy","r","points","contextKey","Symbol","for","getApolloContext","defineProperty","enumerable","writable","configurable","ApolloProvider","client","ApolloContext","DocumentType","cache","Map","operationName","name","Query","Mutation","Subscription","options","onNewData","runLazy","previous","create","runLazyQuery","cleanup","lazyOptions","obsRefetch","variables","currentObservable","refetch","obsFetchMore","fetchMoreOptions","fetchMore","obsUpdateQuery","mapFn","updateQuery","obsStartPolling","pollInterval","startPolling","obsStopPolling","stopPolling","obsSubscribeToMore","subscribeToMore","execute","refreshClient","getOptions","skip","query","removeQuerySubscription","removeObservable","updateObservableQuery","getExecuteSsrResult","getExecuteResult","executeLazy","loading","networkStatus","ready","called","data","fetchData","ssr","Promise","resolve","startQuerySubscription","afterExecute","lazy","isMounted","ssrInitiated","handleErrorOrCompleted","previousOptions","unmount","bind","result","renderPromises","ssrDisabled","fetchDisabled","disableNetworkFetches","ssrLoading","stale","observableQueryFields","addQueryPromise","prepareObservableQueryOptions","verifyDocumentType","fetchPolicy","initializeObservableQuery","getSSRObservable","observableQueryOptions","watchQuery","registerSSRObservable","newObservableQueryOptions","setOptions","catch","currentSubscription","subscribe","next","previousResult","error","resubscribeToQuery","last","resetLastResults","currentResult","getCurrentResult","partial","errors","graphQLErrors","getLastResult","previousData","resetQueryStoreErrors","onCompleted","onError","unsubscribe","andDelete","newOptions","storePrevious","isNew","document","operation","cached","get","fragments","definitions","filter","x","kind","queries","mutations","subscriptions","definition","parser","requiredOperationName","usedOperationName","useBaseQuery","tick","forceUpdate","updatedOptions","queryDataRef","queryData","then","memoFn","useDeepMemo","queryResult","__DEV__","effectFn","useAfterFastRefresh","useQuery"],"mappings":"0NA6BeA,MA3Bf,YAKG,IAJDC,EAIC,EAJDA,SACIC,EAGH,EAHDC,GACAC,EAEC,EAFDA,aACAC,EACC,EADDA,cAEMC,EAAgBC,iBAAOL,GAI7B,OAHAM,qBAAU,WACJN,IAAQI,EAAcG,SAAU,KACnC,CAACP,IACAA,EAAeD,EAMfI,IAICC,EAAcG,SAAWL,EAHrB,KAOFH,G,OC1BHS,EAAY,CAAC,SAAU,WAAY,eAAgB,aAAc,iBACjEC,EAAa,CAAC,YAAa,kBAAmB,mBAC9CC,EAAa,CAAC,MAEpB,SAASC,EAA8BC,EAAQC,GAAY,GAAc,MAAVD,EAAgB,MAAO,GAAI,IAA2DE,EAAKC,EAA5DC,EAAS,GAAQC,EAAaC,OAAOC,KAAKP,GAAqB,IAAKG,EAAI,EAAGA,EAAIE,EAAWG,OAAQL,IAAOD,EAAMG,EAAWF,GAAQF,EAASQ,QAAQP,IAAQ,IAAaE,EAAOF,GAAOF,EAAOE,IAAQ,OAAOE,EAQnS,SAASM,EAAYC,GAC1B,IACEC,EAKED,EALFC,OACAC,EAIEF,EAJFE,SACAvB,EAGEqB,EAHFrB,aACAwB,EAEEH,EAFFG,WACAvB,EACEoB,EADFpB,cAEEwB,EAAQhB,EAA8BY,EAAMf,GAE1CoB,EAAUC,qBAAWC,KAC3B,IAAKF,EAAS,MAAO,CAACD,EAAO,CAC3BF,WACAM,SAAUP,EACVtB,eACAwB,aACAvB,kBAGF,IACE6B,EAGEJ,EAHFI,UACAC,EAEEL,EAFFK,gBACAC,EACEN,EADFM,gBAEIC,EAAOxB,EAA8BiB,EAASnB,GAE9CK,EAAMsB,YAAaX,GACzB,MAAO,CAACP,OAAOmB,OAAO,GAAIV,EAAO,CAC/BW,GAAIL,EAAgBR,GACpB,kBAAmBS,EAAgBT,KACjC,CACFA,WACAM,SAAoB,MAAVP,GAAyB,MAAPV,EAAcsB,YAAaJ,KAAelB,EAAMU,EAC5EE,WAAYA,GAAcS,EAAKT,WAC/BxB,aAA8B,MAAhBA,EAAuBA,EAAeiC,EAAKjC,aACzDC,cAAgC,MAAjBA,EAAwBA,EAAgBgC,EAAKhC,gBAGhE,IAAMoC,EAAwBC,cAC9B,SAACC,EAAOC,GACN,MAEID,EADFE,GAAIC,OADN,MACkB,MADlB,EAKA,EAWKtB,EAbOX,EAA8B8B,EAAO/B,IAEjD,mBAAOmC,EAAP,YACEd,EADF,EACEA,SACAe,EAFF,EAEEA,QACAC,EAHF,EAGEA,WACAC,EAJF,EAIEA,UACAC,EALF,EAKEA,OACAC,EANF,EAMEA,UACAC,EAPF,EAOEA,SACAjD,EARF,EAQEA,aACAC,EATF,EASEA,cATF,IAUEuB,WAAY0B,OAVd,MAU2BtD,EAV3B,EAcA,OAAoBuD,cAAKvB,IAAWwB,SAAU,CAC5CC,MAAO,KACPxD,SAAuBsD,cAAKG,IAAkBF,SAAU,CACtDC,MAAO,KACPxD,SAAuBsD,cAAKD,EAAY,CACtCnD,GAAI8B,EACJe,QAASA,EACTC,WAAYA,EACZC,UAAWA,EACXC,OAAQA,EACRC,UAAWA,EACXC,SAAUA,EACVjD,aAAcA,EACdC,cAAeA,EACfJ,SAAuBsD,cAAKT,EAAW1B,OAAOmB,OAAO,GAAIQ,EAAe,CACtEH,IAAKA,EACLe,KAAM,WACNC,QAAS3B,EACT,eAAgBA,cAM1BQ,EAASoB,YAAc,WACRpB,ICvFTqB,EAAO,SAAAjC,GACX,IACMkC,EASFlC,EATFW,GACiBwB,EAQfnC,EARFoC,gBACUC,EAORrC,EAPFsC,SACWC,EAMTvC,EANFK,UACAmC,EAKExC,EALFwC,iBACAzC,EAIEC,EAJFD,WACAxB,EAGEyB,EAHFzB,aACAC,EAEEwB,EAFFxB,cACAJ,EACE4B,EADF5B,SAEF,EAA8BqE,YAAoBF,EAAgBC,EAAkBH,GAApF,mBAAOhC,EAAP,KAAkBiC,EAAlB,KACM3B,EAAK+B,YAAaR,GAClBE,EAAkBO,mBAAQ,kBAAMR,GAA0B,SAAChD,EAAKyD,GAAN,OAAejC,EAAK,GAAH,OAAMA,EAAN,YAAYiC,EAAZ,YAAoBzD,GAAQ,QAAO,CAACwB,EAAIwB,IACnHU,EAAaF,mBAAQ,iBAAO,CAChCL,WACAjC,YACAN,aACAxB,aAAcA,IAAgB,EAC9BC,cAAeA,IAAiB,EAChC8B,gBAAiB,SAAAnB,GAAG,OAAIiD,EAAgBjD,EAAK,YAC7CoB,gBAAiB,SAAApB,GAAG,OAAIiD,EAAgBjD,EAAK,WAC3C,CAACmD,EAAUjC,EAAWN,EAAYxB,EAAcC,EAAe4D,IACnE,OAAoBV,cAAKvB,IAAWwB,SAAU,CAC5CC,MAAOiB,EACPzE,SAAuBsD,cAAKG,IAAkBF,SAAU,CACtDC,MAAOU,GAAY,KACnBlE,SAAUA,OAKhB6D,EAAKa,MDsDUlC,ECrDAqB,Q,SC1CA,SAASc,EAA0BhD,GAChD,MAA0B,mBAAfA,EACFA,EAAaiD,SAAOC,EAGtBlD,E,qBCDHmD,EAAe,SAAC,GAAD,IACnBnD,EADmB,EACnBA,WACGC,EAFgB,wBAGF0B,cAAKO,EAAD,YAAC,eAAWjC,GAAZ,IACrBD,WAAYgD,EAA0BhD,OAGxCmD,EAAalB,YAAc,eACZkB,Q,QCZAC,cAAmB,e,0ECQ5BC,EAAuBvC,cAAiB,WAI3CE,GAAQ,IAHTsC,EAGS,EAHTA,SACAtD,EAES,EAFTA,WACGC,EACM,iBACT,EAgBKL,EAAY,2BAAKK,GAAN,IACdD,WAAYgD,EAA0BhD,MAjBxC,0BACEuD,EADF,EACEA,UADF,IAGEtC,GAAIC,OAHN,MAGkB,MAHlB,EAIKT,EAJL,wBAMEJ,EANF,EAMEA,SACAe,EAPF,EAOEA,QACAC,EARF,EAQEA,WACAC,EATF,EASEA,UACAC,EAVF,EAUEA,OACAC,EAXF,EAWEA,UACAC,EAZF,EAYEA,SACAjD,EAbF,EAaEA,aACAC,EAdF,EAcEA,cAdF,IAeEuB,WAAY0B,OAfd,MAe2BtD,EAf3B,EAmBMoF,EAASC,YAAmBH,EAAU,YAG5C,OAAoB3B,cAAKvB,IAAWwB,SAAU,CAC5CC,MAAO,KACPxD,SAAuBsD,cAAKG,IAAkBF,SAAU,CACtDC,MAAO,KACPxD,SAAuBsD,cAAKD,EAAY,CACtCnD,GAAI8B,EACJe,QAASA,EACTC,WAAYA,EACZC,UAAWA,EACXC,OAAQA,EACRC,UAAWA,EACXC,SAAUA,EACVjD,aAAcA,EACdC,cAAeA,EACfJ,SAAuBsD,cAAKT,EAAD,YAAC,eAAgBT,GAAjB,IACzBO,IAAKA,EACLuC,UAAWG,IAAWH,EAAWC,EAAQnD,GAAY,sBAM/DgD,EAAQpB,YAAc,UACPoB,QClDTM,EAAY,CAChB5D,SAAU6D,IAAUC,UAAU,CAACD,IAAUE,OAAQF,IAAUG,SAK3DC,MAAOJ,IAAUK,KAAKC,WAKtBC,SAAUP,IAAUQ,KAKpBC,aAAcT,IAAUE,QAGpBQ,EAAM,WACV,MAAM,IAAIC,MAAM,gOAKlBD,EAAIX,UAAYA,EACDnE,WAAOmB,OAAO2D,EAAK,CAChCE,UAAWrB,EACXsB,QAASC,EACTC,KAAMtB,K,kCCtCR,8CAASuB,IAA2Q,OAA9PA,EAAWpF,OAAOmB,QAAU,SAAUrB,GAAU,IAAK,IAAID,EAAI,EAAGA,EAAIwF,UAAUnF,OAAQL,IAAK,CAAE,IAAIH,EAAS2F,UAAUxF,GAAI,IAAK,IAAID,KAAOF,EAAcM,OAAOsF,UAAUC,eAAeC,KAAK9F,EAAQE,KAAQE,EAAOF,GAAOF,EAAOE,IAAY,OAAOE,GAAkBsF,EAASK,MAAMC,KAAML,WAEhT,SAASM,EAAyBjG,EAAQC,GAAY,GAAc,MAAVD,EAAgB,MAAO,GAAI,IAAkEE,EAAKC,EAAnEC,EAEzF,SAAuCJ,EAAQC,GAAY,GAAc,MAAVD,EAAgB,MAAO,GAAI,IAA2DE,EAAKC,EAA5DC,EAAS,GAAQC,EAAaC,OAAOC,KAAKP,GAAqB,IAAKG,EAAI,EAAGA,EAAIE,EAAWG,OAAQL,IAAOD,EAAMG,EAAWF,GAAQF,EAASQ,QAAQP,IAAQ,IAAaE,EAAOF,GAAOF,EAAOE,IAAQ,OAAOE,EAFxML,CAA8BC,EAAQC,GAAuB,GAAIK,OAAO4F,sBAAuB,CAAE,IAAIC,EAAmB7F,OAAO4F,sBAAsBlG,GAAS,IAAKG,EAAI,EAAGA,EAAIgG,EAAiB3F,OAAQL,IAAOD,EAAMiG,EAAiBhG,GAAQF,EAASQ,QAAQP,IAAQ,GAAkBI,OAAOsF,UAAUQ,qBAAqBN,KAAK9F,EAAQE,KAAgBE,EAAOF,GAAOF,EAAOE,IAAU,OAAOE,EAMne,IAAIiG,EAAgBC,sBAAW,SAAU3F,EAAMmB,GAC7C,IAAIyE,EAAa5F,EAAK6F,MAClBA,OAAuB,IAAfD,EAAwB,eAAiBA,EACjDE,EAAY9F,EAAK+F,KACjBA,OAAqB,IAAdD,EAAuB,GAAKA,EACnClF,EAAO0E,EAAyBtF,EAAM,CAAC,QAAS,SAEpD,OAAoBiB,IAAM+E,cAAc,MAAOjB,EAAS,CACtD5D,IAAKA,EACL8E,MAAO,6BACPC,MAAOH,EACPI,OAAQJ,EACRK,QAAS,YACTC,KAAM,OACNC,OAAQT,EACRU,YAAa,IACbC,cAAe,QACfC,eAAgB,SACf7F,GAAoBK,IAAM+E,cAAc,OAAQ,CACjDU,EAAG,6FACYzF,IAAM+E,cAAc,OAAQ,CAC3CW,GAAI,KACJC,GAAI,IACJC,GAAI,KACJC,GAAI,OACW7F,IAAM+E,cAAc,OAAQ,CAC3CW,GAAI,KACJC,GAAI,KACJC,GAAI,QACJC,GAAI,WAGRpB,EAAc5B,UAAY,CACxB+B,MAAO9B,IAAUE,OACjB8B,KAAMhC,IAAUC,UAAU,CAACD,IAAUE,OAAQF,IAAUG,UAEzDwB,EAActD,YAAc,gBACbsD,O,kCC7Cf,8CAASX,IAA2Q,OAA9PA,EAAWpF,OAAOmB,QAAU,SAAUrB,GAAU,IAAK,IAAID,EAAI,EAAGA,EAAIwF,UAAUnF,OAAQL,IAAK,CAAE,IAAIH,EAAS2F,UAAUxF,GAAI,IAAK,IAAID,KAAOF,EAAcM,OAAOsF,UAAUC,eAAeC,KAAK9F,EAAQE,KAAQE,EAAOF,GAAOF,EAAOE,IAAY,OAAOE,GAAkBsF,EAASK,MAAMC,KAAML,WAEhT,SAASM,EAAyBjG,EAAQC,GAAY,GAAc,MAAVD,EAAgB,MAAO,GAAI,IAAkEE,EAAKC,EAAnEC,EAEzF,SAAuCJ,EAAQC,GAAY,GAAc,MAAVD,EAAgB,MAAO,GAAI,IAA2DE,EAAKC,EAA5DC,EAAS,GAAQC,EAAaC,OAAOC,KAAKP,GAAqB,IAAKG,EAAI,EAAGA,EAAIE,EAAWG,OAAQL,IAAOD,EAAMG,EAAWF,GAAQF,EAASQ,QAAQP,IAAQ,IAAaE,EAAOF,GAAOF,EAAOE,IAAQ,OAAOE,EAFxML,CAA8BC,EAAQC,GAAuB,GAAIK,OAAO4F,sBAAuB,CAAE,IAAIC,EAAmB7F,OAAO4F,sBAAsBlG,GAAS,IAAKG,EAAI,EAAGA,EAAIgG,EAAiB3F,OAAQL,IAAOD,EAAMiG,EAAiBhG,GAAQF,EAASQ,QAAQP,IAAQ,GAAkBI,OAAOsF,UAAUQ,qBAAqBN,KAAK9F,EAAQE,KAAgBE,EAAOF,GAAOF,EAAOE,IAAU,OAAOE,EAMne,IAAIsH,EAAgBpB,sBAAW,SAAU3F,EAAMmB,GAC7C,IAAIyE,EAAa5F,EAAK6F,MAClBA,OAAuB,IAAfD,EAAwB,eAAiBA,EACjDE,EAAY9F,EAAK+F,KACjBA,OAAqB,IAAdD,EAAuB,GAAKA,EACnClF,EAAO0E,EAAyBtF,EAAM,CAAC,QAAS,SAEpD,OAAoBiB,IAAM+E,cAAc,MAAOjB,EAAS,CACtD5D,IAAKA,EACL8E,MAAO,6BACPC,MAAOH,EACPI,OAAQJ,EACRK,QAAS,YACTC,KAAM,OACNC,OAAQT,EACRU,YAAa,IACbC,cAAe,QACfC,eAAgB,SACf7F,GAAoBK,IAAM+E,cAAc,SAAU,CACnDgB,GAAI,KACJC,GAAI,KACJC,EAAG,OACYjG,IAAM+E,cAAc,WAAY,CAC/CmB,OAAQ,oBACOlG,IAAM+E,cAAc,OAAQ,CAC3CW,GAAI,KACJC,GAAI,KACJC,GAAI,KACJC,GAAI,UAGRC,EAAcjD,UAAY,CACxB+B,MAAO9B,IAAUE,OACjB8B,KAAMhC,IAAUC,UAAU,CAACD,IAAUE,OAAQF,IAAUG,UAEzD6C,EAAc3E,YAAc,gBACb2E,O,kCC5Cf,6CAcMK,EAdN,OAcmB,EACfC,OAAOC,IAAI,sBACX,qBAEE,SAAUC,IACd,IAAIlH,EAAW,gBAA4B+G,GAU3C,OATK/G,IACHV,OAAO6H,eAAe,gBAAqBJ,EAAY,CACrDpF,MAAO3B,EAAU,gBAAwC,IACzDoH,YAAY,EACZC,UAAU,EACVC,cAAc,IAEhBtH,EAAQ+B,YAAc,iBAEjB/B,I,kCC7BT,+DAYauH,EAAqD,SAAC,G,IACjEC,EAAM,SACNrJ,EAAQ,WAEFsJ,EAAgB,cACtB,OAAO,gBACL,EAAc,SAAS,eACpB,GAWC,YAXA,IAAAzH,MAAA,IACIwH,GAAUxH,EAAQwH,SAAWA,IAC/BxH,EAAUV,OAAOmB,OAAO,GAAIT,EAAS,CAAEwH,OAAM,KAG/C,QACE,YAAQ,EACR,oHAEA,yBAGA,gBAACC,EAAc/F,SAAQ,CAACC,MAAO3B,GAC5B7B,Q,wECvBDuJ,E,iDAAZ,SAAYA,GACV,qBACA,2BACA,mCAHF,CAAYA,MAAY,KAYxB,IAAMC,EAAQ,IAAIC,IAEZ,SAAUC,EAAclF,GAC5B,IAAImF,EACJ,OAAQnF,GACN,KAAK+E,EAAaK,MAChBD,EAAO,QACP,MACF,KAAKJ,EAAaM,SAChBF,EAAO,WACP,MACF,KAAKJ,EAAaO,aAChBH,EAAO,eAGX,OAAOA,EC3BT,ICwBA,cAkBE,WAAY,G,IACVI,EAAO,UACPlI,EAAO,UACPmI,EAAS,YAHX,EASE,YAAMD,EAASlI,IAAQ,K,OArBjB,EAAAoI,SAAmB,EAEnB,EAAAC,SAQJ/I,OAAOgJ,OAAO,MAkGV,EAAAC,aAAe,SAACL,GACtB,EAAKM,UACL,EAAKJ,SAAU,EACf,EAAKK,YAAcP,EACnB,EAAKC,aA8UC,EAAAO,WAAa,SAACC,GAA+B,MACnD,OAAsB,QAAtB,IAAKC,yBAAiB,eAAEC,QAAQF,IAE1B,EAAAG,aAAe,SACrBC,GACqC,MAClC,OAAsB,QAAtB,IAAKH,yBAAiB,eAAEI,UAAUD,IAE/B,EAAAE,eAAiB,SACvBC,GAGU,MACP,OAAsB,QAAtB,IAAKN,yBAAiB,eAAEO,YAAYD,IAEjC,EAAAE,gBAAkB,SAACC,G,MACH,QAAtB,IAAKT,yBAAiB,SAAEU,aAAaD,IAG/B,EAAAE,eAAiB,W,MACD,QAAtB,IAAKX,yBAAiB,SAAEY,eAGlB,EAAAC,mBAAqB,SAI3BvB,GAIC,MACE,OAAsB,QAAtB,IAAKU,yBAAiB,eAAEc,gBAAgBxB,IAxc3C,EAAKC,UAAYA,E,EAqdrB,OAjfkD,iBA+BzC,YAAAwB,QAAP,WACE3E,KAAK4E,gBAEC,MAAkB5E,KAAK6E,aAArBC,EAAI,OAAEC,EAAK,QASnB,OARID,GAAQC,IAAU/E,KAAKqD,SAAS0B,SAClC/E,KAAKgF,0BACLhF,KAAKiF,kBAAkBH,GACvB9E,KAAKqD,SAAS0B,MAAQA,GAGxB/E,KAAKkF,wBAEElF,KAAKmF,uBAAyBnF,KAAKoF,oBAGrC,YAAAC,YAAP,WACE,OAAQrF,KAAKoD,QAUT,CAACpD,KAAKuD,aAAcvD,KAAK2E,WATzB,CACE3E,KAAKuD,aACL,CACE+B,SAAS,EACTC,cAAe,IAAcC,MAC7BC,QAAQ,EACRC,UAAM1H,KAOT,YAAA2H,UAAP,sBACQzC,EAAUlD,KAAK6E,aACrB,OAAI3B,EAAQ4B,OAAwB,IAAhB5B,EAAQ0C,KACrB,IAAIC,SAAQ,SAAAC,GAAW,SAAKC,uBAAL,OAGzB,YAAAC,aAAP,SAAoB,G,IAAE,QAAF,MAAuC,GAAE,GAAvCC,YAAI,IAAG,GAAK,EAChCjG,KAAKkG,WAAY,EACjB,IAAMhD,EAAUlD,KAAK6E,aAUrB,OATI7E,KAAK4D,oBAAsB5D,KAAKmG,gBAClCnG,KAAK+F,yBAGFE,IAAQjG,KAAKoD,SAChBpD,KAAKoG,yBAGPpG,KAAKqG,gBAAkBnD,EAChBlD,KAAKsG,QAAQC,KAAKvG,OAGpB,YAAAwD,QAAP,WACExD,KAAKgF,0BACLhF,KAAKiF,kBAAiB,UACfjF,KAAKqD,SAASmD,QAGhB,YAAA3B,WAAP,WACE,IAAM3B,EAAU,YAAM2B,WAAU,WAkBhC,OAhBI7E,KAAKyD,cACPP,EAAQS,UAAY,2BACfT,EAAQS,WACR3D,KAAKyD,YAAYE,WAEtBT,EAAQlI,QAAO,2BACVkI,EAAQlI,SACRgF,KAAKyD,YAAYzI,UAKpBgF,KAAKoD,gBACAF,EAAQ4B,KAGV5B,GAGF,YAAAiD,aAAP,WACE,OAAOnG,KAAKhF,SAAWgF,KAAKhF,QAAQyL,gBAU9B,YAAAtB,oBAAR,WACQ,MAAgBnF,KAAK6E,aAAnBe,EAAG,MAAEd,EAAI,OACX4B,GAAsB,IAARd,EACde,EAAgB3G,KAAK4E,gBAAgBpC,OAAOoE,sBAE5CC,EAAa,aACjBvB,SAAS,EACTC,cAAe,IAAcD,QAC7BG,QAAQ,EACRC,UAAM1H,EACN8I,OAAO,EACPtE,OAAQxC,KAAKwC,QACVxC,KAAK+G,yBAKV,GAAIL,IAAgB1G,KAAKmG,gBAAkBQ,GAEzC,OADA3G,KAAKqD,SAASmD,OAASK,EAChBA,EAGT,GAAI7G,KAAKmG,eAAgB,CACvB,IAAMK,EAASxG,KAAKoF,oBAAsByB,EAI1C,OAHIL,EAAOlB,UAAYR,GACrB9E,KAAKhF,QAAQyL,eAAgBO,gBAAgBhH,MAAM,WAAM,eAEpDwG,IAIH,YAAAS,8BAAR,WACE,IAAM/D,EAAUlD,KAAK6E,aACrB7E,KAAKkH,mBAAmBhE,EAAQ6B,MAAOrC,EAAaK,OACpD,IAAMhG,EAAcmG,EAAQnG,aAAe,QAY3C,OAPEiD,KAAKmG,gBACoB,iBAAxBjD,EAAQiE,aACiB,sBAAxBjE,EAAQiE,cAEVjE,EAAQiE,YAAc,eAGxB,2BACKjE,GAAO,CACVnG,YAAW,EACX/B,QAASkI,EAAQlI,WAIb,YAAAoM,0BAAR,WAUE,GANIpH,KAAKmG,iBACPnG,KAAK4D,kBAAoB5D,KAAKhF,QAASyL,eAAgBY,iBACrDrH,KAAK6E,gBAIJ7E,KAAK4D,kBAAmB,CAC3B,IAAM0D,EAAyBtH,KAAKiH,gCAEpCjH,KAAKqD,SAASiE,uBAAsB,2BAC/BA,GAAsB,CACzBnO,cAAU,IAEZ6G,KAAK4D,kBAAoB5D,KAAK4E,gBAAgBpC,OAAO+E,WAAU,eAC1DD,IAGDtH,KAAKmG,gBACPnG,KAAKhF,QAASyL,eAAgBe,sBAC5BxH,KAAK4D,kBACL0D,KAMA,YAAApC,sBAAR,WAEE,GAAKlF,KAAK4D,kBAAV,CAKA,IAAM6D,EAA4B,OAAH,IAAG,CAAH,eAC1BzH,KAAKiH,iCAA+B,CACvC9N,cAAU,IAGR6G,KAAK6E,aAAaC,KACpB9E,KAAKqD,SAASiE,uBAAyBG,EAKtC,YAAMA,EAA2BzH,KAAKqD,SAASiE,0BAEhDtH,KAAKqD,SAASiE,uBAAyBG,EACvCzH,KAAK4D,kBACF8D,WAAWD,GAKXE,OAAM,qBAxBT3H,KAAKoH,6BAkCD,YAAArB,uBAAR,SAA+B5C,GAA/B,gBAA+B,IAAAA,MAAwBnD,KAAKmD,WACtDnD,KAAK4H,qBAAuB5H,KAAK6E,aAAaC,OAElD9E,KAAK4H,oBAAsB5H,KAAK4D,kBAAmBiE,UAAU,CAC3DC,KAAM,SAAC,G,IAAExC,EAAO,UAAEC,EAAa,gBAAEG,EAAI,OAC7BqC,EAAiB,EAAK1E,SAASmD,OAInCuB,GACAA,EAAezC,UAAYA,GAC3ByC,EAAexC,gBAAkBA,GACjC,YAAMwC,EAAerC,KAAMA,IAK7BvC,KAEF6E,MAAO,YAEL,GADA,EAAKC,sBACA,EAAMpI,eAAe,iBAAkB,MAAM,EAElD,IAAMkI,EAAiB,EAAK1E,SAASmD,QAElCuB,GAAkBA,EAAezC,UACjC,YAAM,EAAO,EAAKjC,SAAS2E,UAE5B,EAAK3E,SAAS2E,MAAQ,EACtB7E,UAMA,YAAA8E,mBAAR,WACEjI,KAAKgF,0BASG,IAAApB,EAAsB5D,KAAL,kBACzB,GAAI4D,EAAmB,CACrB,IAAMsE,EAAOtE,EAAiB,KAC9B,IACEA,EAAkBuE,mBAClBnI,KAAK+F,yBAFP,QAIEnC,EAAiB,KAAWsE,KAK1B,YAAA9C,iBAAR,WACE,IAAIoB,EAASxG,KAAK+G,wBACZ7D,EAAUlD,KAAK6E,aAYrB,GAAI3B,EAAQ4B,KACV0B,EAAS,OAAH,IAAG,CAAH,eACDA,GAAM,CACTd,UAAM1H,EACNgK,WAAOhK,EACPsH,SAAS,EACTC,cAAe,IAAcC,MAC7BC,QAAQ,SAEL,GAAIzF,KAAK4D,kBAAmB,CAEjC,IAAMwE,EAAgBpI,KAAK4D,kBAAkByE,mBACrC3C,EAAkD0C,EAA9C,KAAE9C,EAA4C8C,EAArC,QAAEE,EAAmCF,EAA5B,QAAE7C,EAA0B6C,EAAb,cAAEG,EAAWH,EAAL,OAC/CJ,EAAUI,EAAL,MAiBX,GAbIG,GAAUA,EAAO/N,OAAS,IAC5BwN,EAAQ,IAAI,IAAY,CAAEQ,cAAeD,KAG3C/B,EAAS,OAAH,IAAG,CAAH,eACDA,GAAM,CACTd,KAAI,EACJJ,QAAO,EACPC,cAAa,EACbyC,MAAK,EACLvC,QAAQ,IAGNH,QAEG,GAAI0C,EACT1N,OAAOmB,OAAO+K,EAAQ,CACpBd,MAAO1F,KAAK4D,kBAAkB6E,iBAAoB,IAC/C/C,WAEA,CACG,IAAAyB,EAAgBnH,KAAK4D,kBAAkBV,QAA5B,YAEnB,GAD2BA,EAAL,gBAGpBoF,KACE5C,GAAqC,IAA7BpL,OAAOC,KAAKmL,GAAMlL,SACZ,eAAhB2M,EAeA,OALA7M,OAAOmB,OAAO+K,EAAQ,CACpBlB,SAAS,EACTC,cAAe,IAAcD,UAE/BkB,EAAO3C,UACA2C,GAKbA,EAAOhE,OAASxC,KAAKwC,OAErBxC,KAAK0H,WAAWxE,GAAS,GAEzB,IAAM6E,EAAiB/H,KAAKqD,SAASmD,OAqBrC,OAnBAxG,KAAKqD,SAASiC,QACZyC,GAAkBA,EAAezC,UAAW,EAO9CkB,EAAOkC,aAAeX,IACnBA,EAAerC,MAAQqC,EAAeW,cAEzC1I,KAAKqD,SAASmD,OAASA,EAMvBxG,KAAK4D,mBAAqB5D,KAAK4D,kBAAkB+E,wBAE1CnC,GAGD,YAAAJ,uBAAR,WACE,GAAKpG,KAAK4D,mBAAsB5D,KAAKqD,SAASmD,OAA9C,CAEM,MAA2BxG,KAAKqD,SAASmD,OAAvCd,EAAI,OAAEJ,EAAO,UAAE0C,EAAK,QAE5B,IAAK1C,EAAS,CACN,MAMFtF,KAAK6E,aALPE,EAAK,QACLpB,EAAS,YACTiF,EAAW,cACXC,EAAO,UACP/D,EAAI,OAIN,GACE9E,KAAKqG,kBACJrG,KAAKqD,SAASiC,SACf,YAAMtF,KAAKqG,gBAAgBtB,MAAOA,IAClC,YAAM/E,KAAKqG,gBAAgB1C,UAAWA,GAEtC,QAGEiF,GAAgBZ,GAAUlD,EAEnB+D,GAAWb,GACpBa,EAAQb,GAFRY,EAAYlD,MAOV,YAAAV,wBAAR,WACMhF,KAAK4H,sBACP5H,KAAK4H,oBAAoBkB,qBAClB9I,KAAK4H,sBAIR,YAAA3C,iBAAR,SAAyB8D,GACnB/I,KAAK4D,oBACP5D,KAAK4D,kBAAL,gBACImF,UACK/I,KAAK4D,oBAuCV,YAAAmD,sBAAR,W,MACE,MAAO,CACLpD,UAAiC,QAAtB,EAAA3D,KAAK4D,yBAAiB,eAAED,UACnCE,QAAS7D,KAAK0D,WACdM,UAAWhE,KAAK8D,aAChBK,YAAanE,KAAKiE,eAClBK,aAActE,KAAKoE,gBACnBI,YAAaxE,KAAKuE,eAClBG,gBAAiB1E,KAAKyE,qBAG5B,EAjfA,CDxBA,WAUE,WAAYvB,EAAmClI,GATxC,KAAAkL,WAAqB,EACrB,KAAAG,gBAA2C,GAG3C,KAAArL,QAAe,GAGd,KAAAkI,QAAmC,GAGzClD,KAAKkD,QAAUA,GAAY,GAC3BlD,KAAKhF,QAAUA,GAAW,GA2D9B,OAxDS,YAAA6J,WAAP,WACE,OAAO7E,KAAKkD,SAGP,YAAAwE,WAAP,SACEsB,EACAC,QAAA,IAAAA,OAAA,GAEIA,IAAkB,YAAMjJ,KAAKkD,QAAS8F,KACxChJ,KAAKqG,gBAAkBrG,KAAKkD,SAE9BlD,KAAKkD,QAAU8F,GAOP,YAAA1C,QAAV,WACEtG,KAAKkG,WAAY,GAGT,YAAAtB,cAAV,WACE,IAAMpC,EACHxC,KAAKkD,SAAWlD,KAAKkD,QAAQV,QAC7BxC,KAAKhF,SAAWgF,KAAKhF,QAAQwH,OAEhC,QACE,cACA,wKAGA,oBAEF,IAAI0G,GAAQ,EAMZ,OALI1G,IAAWxC,KAAKwC,SAClB0G,GAAQ,EACRlJ,KAAKwC,OAASA,EACdxC,KAAKwD,WAEA,CACLhB,OAAQxC,KAAKwC,OACb0G,MAAK,IAIC,YAAAhC,mBAAV,SAA6BiC,EAAwBxL,GACnD,IAAMyL,ED/BJ,SAAiBD,GACrB,IAGIxF,EAAWhG,EAHT0L,EAAS1G,EAAM2G,IAAIH,GACzB,GAAIE,EAAQ,OAAOA,EAInB,QACE,cAAU,KAAe,EACzB,oBAAuB,EAAvB,yJAGA,8BAEF,IAAME,EAAYJ,EAASK,YAAYC,QACrC,SAACC,GAAsB,6BAAAA,EAAEC,QAGrBC,EAAUT,EAASK,YAAYC,QACnC,SAACC,GACC,MAAW,wBAAXA,EAAEC,MAAkD,UAAhBD,EAAEN,aAGpCS,EAAYV,EAASK,YAAYC,QACrC,SAACC,GACC,MAAW,wBAAXA,EAAEC,MAAkD,aAAhBD,EAAEN,aAGpCU,EAAgBX,EAASK,YAAYC,QACzC,SAACC,GACC,MAAW,wBAAXA,EAAEC,MAAkD,iBAAhBD,EAAEN,aAG1C,QACE,aAAW,EAAM,QACdQ,EAAQpP,QAAUqP,EAAUrP,QAAUsP,EAActP,OACvD,yHAEA,uBAEF,EACE,QAAQ,EAAS,QAAgB,EAAG,OAAoB,IAEnD,oBAAQ,EAAQ,OAAQ,EAAM,SAAa,QAAoB,8EAClE,YAAqB,OAAU,aAAM,EAAc,OADe,sBAElE,SAFkE,qFAKH,8CACnE,EAAKoP,EAAQpP,OAAW,EAAU,MAAM,WAAE,EAAO,QAAa,WAExD,IAAc,c,IAClB,EAAS,SACP,EACF,EAAE,OACA,EAGF,EAEK,oBAAkC,IAAtB,EAAM,OAAgB,gEACrC,SADqC,uFAIoB,6BAC7D,MAAY,EAAW,GAEvB,EAAIuP,EAAmB,qBAAoB,GAO3C,MAAU,MANR,EAAO,MAAsB,SAAX,EAAW,UAC9B,aAEA,OAG2B,KAAC,eAE9B,OADC,MAAO,EAAQ,GAChB,EC5CqBC,CAAOb,GACnBc,EAAwBpH,EAAclF,GACtCuM,EAAoBrH,EAAcuG,EAAUzL,MAClD,QACE,YAAU,EAASA,OACnB,eAAasM,EAAqB,uBAC7BA,EAAqB,WAAWC,EAAiB,sBACtD,4BAEN,EAvEA,I,cESM,SAAUC,EACdpF,EACA7B,EACA+C,QAAA,IAAAA,OAAA,GAEA,IAAMjL,EAAU,qBAAW,eACrB,EAAsB,sBAAW,SAAA0O,GAAK,OAAAA,EAAA,IAAO,GAA5CU,EAAI,KAAEC,EAAW,KAClBC,EAAiBpH,EAAS,2BAAMA,GAAO,CAAE6B,MAAK,IAAK,CAAEA,MAAK,GAE1DwF,EAAe,mBACfC,EAAYD,EAAa5Q,UAC7B4Q,EAAa5Q,QAAU,IAAI,EAA6B,CACtDuJ,QAASoH,EACTtP,QAAO,EACPmI,UAAS,WACFqH,EAAUrE,eAWbkE,IAJAxE,QAAQC,UAAU2E,MAAK,WAAM,OAAAF,EAAa5Q,SAAW4Q,EAAa5Q,QAAQuM,WAAamE,WAU/FG,EAAU9C,WAAW4C,GACrBE,EAAUxP,QAAUA,EAKpB,IAUMwL,ECxDF,SACJkE,EACAxQ,GAEA,IAAM4B,EAAM,mBAMZ,OAJKA,EAAInC,SAAY,YAAMO,EAAK4B,EAAInC,QAAQO,OAC1C4B,EAAInC,QAAU,CAAEO,IAAG,EAAEyC,MAAO+N,MAGvB5O,EAAInC,QAAQgD,MD8CJgO,EACb,WAAM,OAAC1E,EAAOuE,EAAUnF,cAAgBmF,EAAlC,YAXK,CACXtH,QAAS,2BACJoH,GAAc,CACjBzB,aAAS,EACTD,iBAAa,IAEf5N,QAAO,EACPoP,KAAI,IAQAQ,EAAc3E,EACfO,EAAyC,GACzCA,EAwBL,OAtBIqE,SEhEA,SAA8BC,GAClC,GAAID,QAAS,CACX,IAAM,EAAa,kBAAO,GAC1B,qBAAU,WACR,OAAO,WAEL,EAAWlR,SAAU,KAEtB,IAEH,qBAAU,YACmB,IAAvB,EAAWA,UAEb,EAAWA,SAAU,EACrBmR,OAED,KFkDHC,CAAoBV,GAGtB,qBAAU,WACR,OAAO,WACLG,EAAUhH,UAGV+G,EAAa5Q,aAAU,KAExB,IAEH,qBAAU,WAAM,OAAA6Q,EAAUxE,aAAa,CAAEC,KAAzB,MAAkC,CAChD2E,EAAYtF,QACZsF,EAAYrF,cACZqF,EAAY5C,MACZ4C,EAAYlF,KACZ8E,EAAU5G,oBAGL4C,EG1FH,SAAUwE,EACdjG,EACA7B,GAEA,OAAOiH,EAAgCpF,EAAO7B,GAAS","file":"static/js/32.c0d82e0d.chunk.js","sourcesContent":["import { useEffect, useRef } from 'react';\n\nfunction NoopTransition({\n  children,\n  in: inProp,\n  mountOnEnter,\n  unmountOnExit\n}) {\n  const hasEnteredRef = useRef(inProp);\n  useEffect(() => {\n    if (inProp) hasEnteredRef.current = true;\n  }, [inProp]);\n  if (inProp) return children; // not in\n  //\n  // if (!mountOnEnter && !unmountOnExit) {\n  //   return children;\n  // }\n\n  if (unmountOnExit) {\n    return null;\n  }\n\n  if (!hasEnteredRef.current && mountOnEnter) {\n    return null;\n  }\n\n  return children;\n}\n\nexport default NoopTransition;","const _excluded = [\"active\", \"eventKey\", \"mountOnEnter\", \"transition\", \"unmountOnExit\"],\n      _excluded2 = [\"activeKey\", \"getControlledId\", \"getControllerId\"],\n      _excluded3 = [\"as\"];\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from 'react';\nimport { useContext } from 'react';\nimport TabContext from './TabContext';\nimport SelectableContext, { makeEventKey } from './SelectableContext';\nimport NoopTransition from './NoopTransition';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport function useTabPanel(_ref) {\n  let {\n    active,\n    eventKey,\n    mountOnEnter,\n    transition,\n    unmountOnExit\n  } = _ref,\n      props = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n  const context = useContext(TabContext);\n  if (!context) return [props, {\n    eventKey,\n    isActive: active,\n    mountOnEnter,\n    transition,\n    unmountOnExit\n  }];\n\n  const {\n    activeKey,\n    getControlledId,\n    getControllerId\n  } = context,\n        rest = _objectWithoutPropertiesLoose(context, _excluded2);\n\n  const key = makeEventKey(eventKey);\n  return [Object.assign({}, props, {\n    id: getControlledId(eventKey),\n    'aria-labelledby': getControllerId(eventKey)\n  }), {\n    eventKey,\n    isActive: active == null && key != null ? makeEventKey(activeKey) === key : active,\n    transition: transition || rest.transition,\n    mountOnEnter: mountOnEnter != null ? mountOnEnter : rest.mountOnEnter,\n    unmountOnExit: unmountOnExit != null ? unmountOnExit : rest.unmountOnExit\n  }];\n}\nconst TabPanel = /*#__PURE__*/React.forwardRef( // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n(_ref2, ref) => {\n  let {\n    as: Component = 'div'\n  } = _ref2,\n      props = _objectWithoutPropertiesLoose(_ref2, _excluded3);\n\n  const [tabPanelProps, {\n    isActive,\n    onEnter,\n    onEntering,\n    onEntered,\n    onExit,\n    onExiting,\n    onExited,\n    mountOnEnter,\n    unmountOnExit,\n    transition: Transition = NoopTransition\n  }] = useTabPanel(props); // We provide an empty the TabContext so `<Nav>`s in `<TabPanel>`s don't\n  // conflict with the top level one.\n\n  return /*#__PURE__*/_jsx(TabContext.Provider, {\n    value: null,\n    children: /*#__PURE__*/_jsx(SelectableContext.Provider, {\n      value: null,\n      children: /*#__PURE__*/_jsx(Transition, {\n        in: isActive,\n        onEnter: onEnter,\n        onEntering: onEntering,\n        onEntered: onEntered,\n        onExit: onExit,\n        onExiting: onExiting,\n        onExited: onExited,\n        mountOnEnter: mountOnEnter,\n        unmountOnExit: unmountOnExit,\n        children: /*#__PURE__*/_jsx(Component, Object.assign({}, tabPanelProps, {\n          ref: ref,\n          role: \"tabpanel\",\n          hidden: !isActive,\n          \"aria-hidden\": !isActive\n        }))\n      })\n    })\n  });\n});\nTabPanel.displayName = 'TabPanel';\nexport default TabPanel;","import * as React from 'react';\nimport { useMemo } from 'react';\nimport { useUncontrolledProp } from 'uncontrollable';\nimport { useSSRSafeId } from './ssr';\nimport TabContext from './TabContext';\nimport SelectableContext from './SelectableContext';\nimport TabPanel from './TabPanel';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nconst Tabs = props => {\n  const {\n    id: userId,\n    generateChildId: generateCustomChildId,\n    onSelect: propsOnSelect,\n    activeKey: propsActiveKey,\n    defaultActiveKey,\n    transition,\n    mountOnEnter,\n    unmountOnExit,\n    children\n  } = props;\n  const [activeKey, onSelect] = useUncontrolledProp(propsActiveKey, defaultActiveKey, propsOnSelect);\n  const id = useSSRSafeId(userId);\n  const generateChildId = useMemo(() => generateCustomChildId || ((key, type) => id ? `${id}-${type}-${key}` : null), [id, generateCustomChildId]);\n  const tabContext = useMemo(() => ({\n    onSelect,\n    activeKey,\n    transition,\n    mountOnEnter: mountOnEnter || false,\n    unmountOnExit: unmountOnExit || false,\n    getControlledId: key => generateChildId(key, 'tabpane'),\n    getControllerId: key => generateChildId(key, 'tab')\n  }), [onSelect, activeKey, transition, mountOnEnter, unmountOnExit, generateChildId]);\n  return /*#__PURE__*/_jsx(TabContext.Provider, {\n    value: tabContext,\n    children: /*#__PURE__*/_jsx(SelectableContext.Provider, {\n      value: onSelect || null,\n      children: children\n    })\n  });\n};\n\nTabs.Panel = TabPanel;\nexport default Tabs;","import Fade from './Fade';\nexport default function getTabTransitionComponent(transition) {\n  if (typeof transition === 'boolean') {\n    return transition ? Fade : undefined;\n  }\n\n  return transition;\n}","import * as React from 'react';\nimport Tabs from '@restart/ui/Tabs';\nimport getTabTransitionComponent from './getTabTransitionComponent';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nconst TabContainer = ({\n  transition,\n  ...props\n}) => /*#__PURE__*/_jsx(Tabs, { ...props,\n  transition: getTabTransitionComponent(transition)\n});\n\nTabContainer.displayName = 'TabContainer';\nexport default TabContainer;","import createWithBsPrefix from './createWithBsPrefix';\nexport default createWithBsPrefix('tab-content');","import classNames from 'classnames';\nimport * as React from 'react';\nimport NoopTransition from '@restart/ui/NoopTransition';\nimport SelectableContext from '@restart/ui/SelectableContext';\nimport TabContext from '@restart/ui/TabContext';\nimport { useTabPanel } from '@restart/ui/TabPanel';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport getTabTransitionComponent from './getTabTransitionComponent';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst TabPane = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  transition,\n  ...props\n}, ref) => {\n  const [{\n    className,\n    // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n    as: Component = 'div',\n    ...rest\n  }, {\n    isActive,\n    onEnter,\n    onEntering,\n    onEntered,\n    onExit,\n    onExiting,\n    onExited,\n    mountOnEnter,\n    unmountOnExit,\n    transition: Transition = NoopTransition\n  }] = useTabPanel({ ...props,\n    transition: getTabTransitionComponent(transition)\n  });\n  const prefix = useBootstrapPrefix(bsPrefix, 'tab-pane'); // We provide an empty the TabContext so `<Nav>`s in `<TabPanel>`s don't\n  // conflict with the top level one.\n\n  return /*#__PURE__*/_jsx(TabContext.Provider, {\n    value: null,\n    children: /*#__PURE__*/_jsx(SelectableContext.Provider, {\n      value: null,\n      children: /*#__PURE__*/_jsx(Transition, {\n        in: isActive,\n        onEnter: onEnter,\n        onEntering: onEntering,\n        onEntered: onEntered,\n        onExit: onExit,\n        onExiting: onExiting,\n        onExited: onExited,\n        mountOnEnter: mountOnEnter,\n        unmountOnExit: unmountOnExit,\n        children: /*#__PURE__*/_jsx(Component, { ...rest,\n          ref: ref,\n          className: classNames(className, prefix, isActive && 'active')\n        })\n      })\n    })\n  });\n});\nTabPane.displayName = 'TabPane';\nexport default TabPane;","import PropTypes from 'prop-types';\nimport * as React from 'react';\nimport TabContainer from './TabContainer';\nimport TabContent from './TabContent';\nimport TabPane from './TabPane';\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\n/* eslint-disable react/no-unused-prop-types */\nconst propTypes = {\n  eventKey: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\n  /**\n   * Content for the tab title.\n   */\n  title: PropTypes.node.isRequired,\n\n  /**\n   * The disabled state of the tab.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * Class to pass to the underlying nav link.\n   */\n  tabClassName: PropTypes.string\n};\n\nconst Tab = () => {\n  throw new Error('ReactBootstrap: The `Tab` component is not meant to be rendered! ' + \"It's an abstract component that is only valid as a direct Child of the `Tabs` Component. \" + 'For custom tabs components use TabPane and TabsContainer directly'); // Needed otherwise docs error out.\n\n  return /*#__PURE__*/_jsx(_Fragment, {});\n};\n\nTab.propTypes = propTypes;\nexport default Object.assign(Tab, {\n  Container: TabContainer,\n  Content: TabContent,\n  Pane: TabPane\n});","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { forwardRef } from 'react';\nimport PropTypes from 'prop-types';\nvar AlertTriangle = forwardRef(function (_ref, ref) {\n  var _ref$color = _ref.color,\n      color = _ref$color === void 0 ? 'currentColor' : _ref$color,\n      _ref$size = _ref.size,\n      size = _ref$size === void 0 ? 24 : _ref$size,\n      rest = _objectWithoutProperties(_ref, [\"color\", \"size\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    ref: ref,\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: size,\n    height: size,\n    viewBox: \"0 0 24 24\",\n    fill: \"none\",\n    stroke: color,\n    strokeWidth: \"2\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  }, rest), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M10.29 3.86L1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0z\"\n  }), /*#__PURE__*/React.createElement(\"line\", {\n    x1: \"12\",\n    y1: \"9\",\n    x2: \"12\",\n    y2: \"13\"\n  }), /*#__PURE__*/React.createElement(\"line\", {\n    x1: \"12\",\n    y1: \"17\",\n    x2: \"12.01\",\n    y2: \"17\"\n  }));\n});\nAlertTriangle.propTypes = {\n  color: PropTypes.string,\n  size: PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n};\nAlertTriangle.displayName = 'AlertTriangle';\nexport default AlertTriangle;","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { forwardRef } from 'react';\nimport PropTypes from 'prop-types';\nvar ArrowUpCircle = forwardRef(function (_ref, ref) {\n  var _ref$color = _ref.color,\n      color = _ref$color === void 0 ? 'currentColor' : _ref$color,\n      _ref$size = _ref.size,\n      size = _ref$size === void 0 ? 24 : _ref$size,\n      rest = _objectWithoutProperties(_ref, [\"color\", \"size\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    ref: ref,\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: size,\n    height: size,\n    viewBox: \"0 0 24 24\",\n    fill: \"none\",\n    stroke: color,\n    strokeWidth: \"2\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  }, rest), /*#__PURE__*/React.createElement(\"circle\", {\n    cx: \"12\",\n    cy: \"12\",\n    r: \"10\"\n  }), /*#__PURE__*/React.createElement(\"polyline\", {\n    points: \"16 12 12 8 8 12\"\n  }), /*#__PURE__*/React.createElement(\"line\", {\n    x1: \"12\",\n    y1: \"16\",\n    x2: \"12\",\n    y2: \"8\"\n  }));\n});\nArrowUpCircle.propTypes = {\n  color: PropTypes.string,\n  size: PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n};\nArrowUpCircle.displayName = 'ArrowUpCircle';\nexport default ArrowUpCircle;","import * as React from 'react';\nimport { ApolloClient } from '../../core';\nimport { canUseSymbol } from '../../utilities';\nimport type { RenderPromises } from '../ssr';\n\nexport interface ApolloContextValue {\n  client?: ApolloClient<object>;\n  renderPromises?: RenderPromises;\n}\n\n// To make sure Apollo Client doesn't create more than one React context\n// (which can lead to problems like having an Apollo Client instance added\n// in one context, then attempting to retrieve it from another different\n// context), a single Apollo context is created and tracked in global state.\nconst contextKey = canUseSymbol\n  ? Symbol.for('__APOLLO_CONTEXT__')\n  : '__APOLLO_CONTEXT__';\n\nexport function getApolloContext(): React.Context<ApolloContextValue> {\n  let context = (React.createContext as any)[contextKey] as React.Context<ApolloContextValue>;\n  if (!context) {\n    Object.defineProperty(React.createContext, contextKey, {\n      value: context = React.createContext<ApolloContextValue>({}),\n      enumerable: false,\n      writable: false,\n      configurable: true,\n    });\n    context.displayName = 'ApolloContext';\n  }\n  return context;\n}\n\nexport { getApolloContext as resetApolloContext }\n","import { invariant } from '../../utilities/globals';\n\nimport * as React from 'react';\n\nimport { ApolloClient } from '../../core';\nimport { getApolloContext } from './ApolloContext';\n\nexport interface ApolloProviderProps<TCache> {\n  client: ApolloClient<TCache>;\n  children: React.ReactNode | React.ReactNode[] | null;\n}\n\nexport const ApolloProvider: React.FC<ApolloProviderProps<any>> = ({\n  client,\n  children\n}) => {\n  const ApolloContext = getApolloContext();\n  return (\n    <ApolloContext.Consumer>\n      {(context: any = {}) => {\n        if (client && context.client !== client) {\n          context = Object.assign({}, context, { client });\n        }\n\n        invariant(\n          context.client,\n          'ApolloProvider was not passed a client instance. Make ' +\n            'sure you pass in your client via the \"client\" prop.'\n        );\n\n        return (\n          <ApolloContext.Provider value={context}>\n            {children}\n          </ApolloContext.Provider>\n        );\n      }}\n    </ApolloContext.Consumer>\n  );\n};\n","import { invariant } from '../../utilities/globals';\n\nimport {\n  DocumentNode,\n  DefinitionNode,\n  VariableDefinitionNode,\n  OperationDefinitionNode\n} from 'graphql';\n\nexport enum DocumentType {\n  Query,\n  Mutation,\n  Subscription\n}\n\nexport interface IDocumentDefinition {\n  type: DocumentType;\n  name: string;\n  variables: ReadonlyArray<VariableDefinitionNode>;\n}\n\nconst cache = new Map();\n\nexport function operationName(type: DocumentType) {\n  let name;\n  switch (type) {\n    case DocumentType.Query:\n      name = 'Query';\n      break;\n    case DocumentType.Mutation:\n      name = 'Mutation';\n      break;\n    case DocumentType.Subscription:\n      name = 'Subscription';\n      break;\n  }\n  return name;\n}\n\n// This parser is mostly used to safety check incoming documents.\nexport function parser(document: DocumentNode): IDocumentDefinition {\n  const cached = cache.get(document);\n  if (cached) return cached;\n\n  let variables, type, name;\n\n  invariant(\n    !!document && !!document.kind,\n    `Argument of ${document} passed to parser was not a valid GraphQL ` +\n      `DocumentNode. You may need to use 'graphql-tag' or another method ` +\n      `to convert your operation into a document`\n  );\n\n  const fragments = document.definitions.filter(\n    (x: DefinitionNode) => x.kind === 'FragmentDefinition'\n  );\n\n  const queries = document.definitions.filter(\n    (x: DefinitionNode) =>\n      x.kind === 'OperationDefinition' && x.operation === 'query'\n  );\n\n  const mutations = document.definitions.filter(\n    (x: DefinitionNode) =>\n      x.kind === 'OperationDefinition' && x.operation === 'mutation'\n  );\n\n  const subscriptions = document.definitions.filter(\n    (x: DefinitionNode) =>\n      x.kind === 'OperationDefinition' && x.operation === 'subscription'\n  );\n\n  invariant(\n    !fragments.length ||\n      (queries.length || mutations.length || subscriptions.length),\n    `Passing only a fragment to 'graphql' is not yet supported. ` +\n      `You must include a query, subscription or mutation as well`\n  );\n\n  invariant(\n    queries.length + mutations.length + subscriptions.length <= 1,\n    `react-apollo only supports a query, subscription, or a mutation per HOC. ` +\n      `${document} had ${queries.length} queries, ${subscriptions.length} ` +\n      `subscriptions and ${mutations.length} mutations. ` +\n      `You can use 'compose' to join multiple operation types to a component`\n  );\n\n  type = queries.length ? DocumentType.Query : DocumentType.Mutation;\n  if (!queries.length && !mutations.length) type = DocumentType.Subscription;\n\n  const definitions = queries.length\n    ? queries\n    : mutations.length\n    ? mutations\n    : subscriptions;\n\n  invariant(\n    definitions.length === 1,\n    `react-apollo only supports one definition per HOC. ${document} had ` +\n      `${definitions.length} definitions. ` +\n      `You can use 'compose' to join multiple operation types to a component`\n  );\n\n  const definition = definitions[0] as OperationDefinitionNode;\n  variables = definition.variableDefinitions || [];\n\n  if (definition.name && definition.name.kind === 'Name') {\n    name = definition.name.value;\n  } else {\n    name = 'data'; // fallback to using data if no name\n  }\n\n  const payload = { name, type, variables };\n  cache.set(document, payload);\n  return payload;\n}\n","import { invariant } from '../../utilities/globals';\n\nimport { DocumentNode } from 'graphql';\nimport { equal } from '@wry/equality';\n\nimport { ApolloClient } from '../../core';\nimport { DocumentType, parser, operationName } from '../parser';\nimport { CommonOptions } from '../types/types';\n\nexport abstract class OperationData<TOptions = any> {\n  public isMounted: boolean = false;\n  public previousOptions: CommonOptions<TOptions> = {} as CommonOptions<\n    TOptions\n  >;\n  public context: any = {};\n  public client: ApolloClient<object>;\n\n  private options: CommonOptions<TOptions> = {} as CommonOptions<TOptions>;\n\n  constructor(options?: CommonOptions<TOptions>, context?: any) {\n    this.options = options || ({} as CommonOptions<TOptions>);\n    this.context = context || {};\n  }\n\n  public getOptions(): CommonOptions<TOptions> {\n    return this.options;\n  }\n\n  public setOptions(\n    newOptions: CommonOptions<TOptions>,\n    storePrevious: boolean = false\n  ) {\n    if (storePrevious && !equal(this.options, newOptions)) {\n      this.previousOptions = this.options;\n    }\n    this.options = newOptions;\n  }\n\n  public abstract execute(...args: any): any;\n  public abstract afterExecute(...args: any): void | (() => void);\n  public abstract cleanup(): void;\n\n  protected unmount() {\n    this.isMounted = false;\n  }\n\n  protected refreshClient() {\n    const client =\n      (this.options && this.options.client) ||\n      (this.context && this.context.client);\n\n    invariant(\n      !!client,\n      'Could not find \"client\" in the context or passed in as an option. ' +\n        'Wrap the root component in an <ApolloProvider>, or pass an ' +\n        'ApolloClient instance in via options.'\n    );\n\n    let isNew = false;\n    if (client !== this.client) {\n      isNew = true;\n      this.client = client;\n      this.cleanup();\n    }\n    return {\n      client: this.client as ApolloClient<object>,\n      isNew\n    };\n  }\n\n  protected verifyDocumentType(document: DocumentNode, type: DocumentType) {\n    const operation = parser(document);\n    const requiredOperationName = operationName(type);\n    const usedOperationName = operationName(operation.type);\n    invariant(\n      operation.type === type,\n      `Running a ${requiredOperationName} requires a graphql ` +\n        `${requiredOperationName}, but a ${usedOperationName} was used instead.`\n    );\n  }\n}\n","import { equal } from '@wry/equality';\n\nimport { ApolloError } from '../../errors';\n\nimport {\n  ApolloClient,\n  NetworkStatus,\n  FetchMoreQueryOptions,\n  SubscribeToMoreOptions,\n  ObservableQuery,\n  FetchMoreOptions,\n  UpdateQueryOptions,\n  DocumentNode,\n  TypedDocumentNode,\n} from '../../core';\n\nimport {\n  ObservableSubscription\n} from '../../utilities';\n\nimport { DocumentType } from '../parser';\nimport {\n  QueryResult,\n  QueryDataOptions,\n  QueryTuple,\n  QueryLazyOptions,\n  ObservableQueryFields,\n} from '../types/types';\nimport { OperationData } from './OperationData';\n\ntype ObservableQueryOptions<TData, TVars> =\n  ReturnType<QueryData<TData, TVars>[\"prepareObservableQueryOptions\"]>;\n\nexport class QueryData<TData, TVariables> extends OperationData<\n  QueryDataOptions<TData, TVariables>\n> {\n  public onNewData: () => void;\n  public currentObservable?: ObservableQuery<TData, TVariables>;\n  private currentSubscription?: ObservableSubscription;\n  private runLazy: boolean = false;\n  private lazyOptions?: QueryLazyOptions<TVariables>;\n  private previous: {\n    client?: ApolloClient<object>;\n    query?: DocumentNode | TypedDocumentNode<TData, TVariables>;\n    observableQueryOptions?: ObservableQueryOptions<TData, TVariables>;\n    result?: QueryResult<TData, TVariables>;\n    loading?: boolean;\n    options?: QueryDataOptions<TData, TVariables>;\n    error?: ApolloError;\n  } = Object.create(null);\n\n  constructor({\n    options,\n    context,\n    onNewData\n  }: {\n    options: QueryDataOptions<TData, TVariables>;\n    context: any;\n    onNewData: () => void;\n  }) {\n    super(options, context);\n    this.onNewData = onNewData;\n  }\n\n  public execute(): QueryResult<TData, TVariables> {\n    this.refreshClient();\n\n    const { skip, query } = this.getOptions();\n    if (skip || query !== this.previous.query) {\n      this.removeQuerySubscription();\n      this.removeObservable(!skip);\n      this.previous.query = query;\n    }\n\n    this.updateObservableQuery();\n\n    return this.getExecuteSsrResult() || this.getExecuteResult();\n  }\n\n  public executeLazy(): QueryTuple<TData, TVariables> {\n    return !this.runLazy\n      ? [\n          this.runLazyQuery,\n          {\n            loading: false,\n            networkStatus: NetworkStatus.ready,\n            called: false,\n            data: undefined\n          }\n        ]\n      : [this.runLazyQuery, this.execute()];\n  }\n\n  // For server-side rendering\n  public fetchData(): Promise<void> | boolean {\n    const options = this.getOptions();\n    if (options.skip || options.ssr === false) return false;\n    return new Promise(resolve => this.startQuerySubscription(resolve));\n  }\n\n  public afterExecute({ lazy = false }: { lazy?: boolean } = {}) {\n    this.isMounted = true;\n    const options = this.getOptions();\n    if (this.currentObservable && !this.ssrInitiated()) {\n      this.startQuerySubscription();\n    }\n\n    if (!lazy || this.runLazy) {\n      this.handleErrorOrCompleted();\n    }\n\n    this.previousOptions = options;\n    return this.unmount.bind(this);\n  }\n\n  public cleanup() {\n    this.removeQuerySubscription();\n    this.removeObservable(true);\n    delete this.previous.result;\n  }\n\n  public getOptions() {\n    const options = super.getOptions();\n\n    if (this.lazyOptions) {\n      options.variables = {\n        ...options.variables,\n        ...this.lazyOptions.variables\n      } as TVariables;\n      options.context = {\n        ...options.context,\n        ...this.lazyOptions.context\n      };\n    }\n\n    // skip is not supported when using lazy query execution.\n    if (this.runLazy) {\n      delete options.skip;\n    }\n\n    return options;\n  }\n\n  public ssrInitiated() {\n    return this.context && this.context.renderPromises;\n  }\n\n  private runLazyQuery = (options?: QueryLazyOptions<TVariables>) => {\n    this.cleanup();\n    this.runLazy = true;\n    this.lazyOptions = options;\n    this.onNewData();\n  };\n\n  private getExecuteSsrResult() {\n    const { ssr, skip } = this.getOptions();\n    const ssrDisabled = ssr === false;\n    const fetchDisabled = this.refreshClient().client.disableNetworkFetches;\n\n    const ssrLoading = {\n      loading: true,\n      networkStatus: NetworkStatus.loading,\n      called: true,\n      data: undefined,\n      stale: false,\n      client: this.client,\n      ...this.observableQueryFields(),\n    } as QueryResult<TData, TVariables>;\n\n    // If SSR has been explicitly disabled, and this function has been called\n    // on the server side, return the default loading state.\n    if (ssrDisabled && (this.ssrInitiated() || fetchDisabled)) {\n      this.previous.result = ssrLoading;\n      return ssrLoading;\n    }\n\n    if (this.ssrInitiated()) {\n      const result = this.getExecuteResult() || ssrLoading;\n      if (result.loading && !skip) {\n        this.context.renderPromises!.addQueryPromise(this, () => null);\n      }\n      return result;\n    }\n  }\n\n  private prepareObservableQueryOptions() {\n    const options = this.getOptions();\n    this.verifyDocumentType(options.query, DocumentType.Query);\n    const displayName = options.displayName || 'Query';\n\n    // Set the fetchPolicy to cache-first for network-only and cache-and-network\n    // fetches for server side renders.\n    if (\n      this.ssrInitiated() &&\n      (options.fetchPolicy === 'network-only' ||\n        options.fetchPolicy === 'cache-and-network')\n    ) {\n      options.fetchPolicy = 'cache-first';\n    }\n\n    return {\n      ...options,\n      displayName,\n      context: options.context,\n    };\n  }\n\n  private initializeObservableQuery() {\n    // See if there is an existing observable that was used to fetch the same\n    // data and if so, use it instead since it will contain the proper queryId\n    // to fetch the result set. This is used during SSR.\n    if (this.ssrInitiated()) {\n      this.currentObservable = this.context!.renderPromises!.getSSRObservable(\n        this.getOptions()\n      );\n    }\n\n    if (!this.currentObservable) {\n      const observableQueryOptions = this.prepareObservableQueryOptions();\n\n      this.previous.observableQueryOptions = {\n        ...observableQueryOptions,\n        children: void 0,\n      };\n      this.currentObservable = this.refreshClient().client.watchQuery({\n        ...observableQueryOptions\n      });\n\n      if (this.ssrInitiated()) {\n        this.context!.renderPromises!.registerSSRObservable(\n          this.currentObservable,\n          observableQueryOptions\n        );\n      }\n    }\n  }\n\n  private updateObservableQuery() {\n    // If we skipped initially, we may not have yet created the observable\n    if (!this.currentObservable) {\n      this.initializeObservableQuery();\n      return;\n    }\n\n    const newObservableQueryOptions = {\n      ...this.prepareObservableQueryOptions(),\n      children: void 0,\n    };\n\n    if (this.getOptions().skip) {\n      this.previous.observableQueryOptions = newObservableQueryOptions;\n      return;\n    }\n\n    if (\n      !equal(newObservableQueryOptions, this.previous.observableQueryOptions)\n    ) {\n      this.previous.observableQueryOptions = newObservableQueryOptions;\n      this.currentObservable\n        .setOptions(newObservableQueryOptions)\n        // The error will be passed to the child container, so we don't\n        // need to log it here. We could conceivably log something if\n        // an option was set. OTOH we don't log errors w/ the original\n        // query. See https://github.com/apollostack/react-apollo/issues/404\n        .catch(() => {});\n    }\n  }\n\n  // Setup a subscription to watch for Apollo Client `ObservableQuery` changes.\n  // When new data is received, and it doesn't match the data that was used\n  // during the last `QueryData.execute` call (and ultimately the last query\n  // component render), trigger the `onNewData` callback. If not specified,\n  // `onNewData` will fallback to the default `QueryData.onNewData` function\n  // (which usually leads to a query component re-render).\n  private startQuerySubscription(onNewData: () => void = this.onNewData) {\n    if (this.currentSubscription || this.getOptions().skip) return;\n\n    this.currentSubscription = this.currentObservable!.subscribe({\n      next: ({ loading, networkStatus, data }) => {\n        const previousResult = this.previous.result;\n\n        // Make sure we're not attempting to re-render similar results\n        if (\n          previousResult &&\n          previousResult.loading === loading &&\n          previousResult.networkStatus === networkStatus &&\n          equal(previousResult.data, data)\n        ) {\n          return;\n        }\n\n        onNewData();\n      },\n      error: error => {\n        this.resubscribeToQuery();\n        if (!error.hasOwnProperty('graphQLErrors')) throw error;\n\n        const previousResult = this.previous.result;\n        if (\n          (previousResult && previousResult.loading) ||\n          !equal(error, this.previous.error)\n        ) {\n          this.previous.error = error;\n          onNewData();\n        }\n      }\n    });\n  }\n\n  private resubscribeToQuery() {\n    this.removeQuerySubscription();\n\n    // Unfortunately, if `lastError` is set in the current\n    // `observableQuery` when the subscription is re-created,\n    // the subscription will immediately receive the error, which will\n    // cause it to terminate again. To avoid this, we first clear\n    // the last error/result from the `observableQuery` before re-starting\n    // the subscription, and restore it afterwards (so the subscription\n    // has a chance to stay open).\n    const { currentObservable } = this;\n    if (currentObservable) {\n      const last = currentObservable[\"last\"];\n      try {\n        currentObservable.resetLastResults();\n        this.startQuerySubscription();\n      } finally {\n        currentObservable[\"last\"] = last;\n      }\n    }\n  }\n\n  private getExecuteResult(): QueryResult<TData, TVariables> {\n    let result = this.observableQueryFields() as QueryResult<TData, TVariables>;\n    const options = this.getOptions();\n\n    // When skipping a query (ie. we're not querying for data but still want\n    // to render children), make sure the `data` is cleared out and\n    // `loading` is set to `false` (since we aren't loading anything).\n    //\n    // NOTE: We no longer think this is the correct behavior. Skipping should\n    // not automatically set `data` to `undefined`, but instead leave the\n    // previous data in place. In other words, skipping should not mandate\n    // that previously received data is all of a sudden removed. Unfortunately,\n    // changing this is breaking, so we'll have to wait until Apollo Client\n    // 4.0 to address this.\n    if (options.skip) {\n      result = {\n        ...result,\n        data: undefined,\n        error: undefined,\n        loading: false,\n        networkStatus: NetworkStatus.ready,\n        called: true,\n      };\n    } else if (this.currentObservable) {\n      // Fetch the current result (if any) from the store.\n      const currentResult = this.currentObservable.getCurrentResult();\n      const { data, loading, partial, networkStatus, errors } = currentResult;\n      let { error } = currentResult;\n\n      // Until a set naming convention for networkError and graphQLErrors is\n      // decided upon, we map errors (graphQLErrors) to the error options.\n      if (errors && errors.length > 0) {\n        error = new ApolloError({ graphQLErrors: errors });\n      }\n\n      result = {\n        ...result,\n        data,\n        loading,\n        networkStatus,\n        error,\n        called: true\n      };\n\n      if (loading) {\n        // Fall through without modifying result...\n      } else if (error) {\n        Object.assign(result, {\n          data: (this.currentObservable.getLastResult() || ({} as any))\n            .data\n        });\n      } else {\n        const { fetchPolicy } = this.currentObservable.options;\n        const { partialRefetch } = options;\n        if (\n          partialRefetch &&\n          partial &&\n          (!data || Object.keys(data).length === 0) &&\n          fetchPolicy !== 'cache-only'\n        ) {\n          // When a `Query` component is mounted, and a mutation is executed\n          // that returns the same ID as the mounted `Query`, but has less\n          // fields in its result, Apollo Client's `QueryManager` returns the\n          // data as `undefined` since a hit can't be found in the cache.\n          // This can lead to application errors when the UI elements rendered by\n          // the original `Query` component are expecting certain data values to\n          // exist, and they're all of a sudden stripped away. To help avoid\n          // this we'll attempt to refetch the `Query` data.\n          Object.assign(result, {\n            loading: true,\n            networkStatus: NetworkStatus.loading\n          });\n          result.refetch();\n          return result;\n        }\n      }\n    }\n\n    result.client = this.client;\n    // Store options as this.previousOptions.\n    this.setOptions(options, true);\n\n    const previousResult = this.previous.result;\n\n    this.previous.loading =\n      previousResult && previousResult.loading || false;\n\n    // Ensure the returned result contains previousData as a separate\n    // property, to give developers the flexibility of leveraging outdated\n    // data while new data is loading from the network. Falling back to\n    // previousResult.previousData when previousResult.data is falsy here\n    // allows result.previousData to persist across multiple results.\n    result.previousData = previousResult &&\n      (previousResult.data || previousResult.previousData);\n\n    this.previous.result = result;\n\n    // Any query errors that exist are now available in `result`, so we'll\n    // remove the original errors from the `ObservableQuery` query store to\n    // make sure they aren't re-displayed on subsequent (potentially error\n    // free) requests/responses.\n    this.currentObservable && this.currentObservable.resetQueryStoreErrors();\n\n    return result;\n  }\n\n  private handleErrorOrCompleted() {\n    if (!this.currentObservable || !this.previous.result) return;\n\n    const { data, loading, error } = this.previous.result;\n\n    if (!loading) {\n      const {\n        query,\n        variables,\n        onCompleted,\n        onError,\n        skip\n      } = this.getOptions();\n\n      // No changes, so we won't call onError/onCompleted.\n      if (\n        this.previousOptions &&\n        !this.previous.loading &&\n        equal(this.previousOptions.query, query) &&\n        equal(this.previousOptions.variables, variables)\n      ) {\n        return;\n      }\n\n      if (onCompleted && !error && !skip) {\n        onCompleted(data as TData);\n      } else if (onError && error) {\n        onError(error);\n      }\n    }\n  }\n\n  private removeQuerySubscription() {\n    if (this.currentSubscription) {\n      this.currentSubscription.unsubscribe();\n      delete this.currentSubscription;\n    }\n  }\n\n  private removeObservable(andDelete: boolean) {\n    if (this.currentObservable) {\n      this.currentObservable[\"tearDownQuery\"]();\n      if (andDelete) {\n        delete this.currentObservable;\n      }\n    }\n  }\n\n  private obsRefetch = (variables?: Partial<TVariables>) =>\n    this.currentObservable?.refetch(variables);\n\n  private obsFetchMore = (\n    fetchMoreOptions: FetchMoreQueryOptions<TVariables, TData> &\n      FetchMoreOptions<TData, TVariables>\n  ) => this.currentObservable?.fetchMore(fetchMoreOptions);\n\n  private obsUpdateQuery = <TVars = TVariables>(\n    mapFn: (\n      previousQueryResult: TData,\n      options: UpdateQueryOptions<TVars>\n    ) => TData\n  ) => this.currentObservable?.updateQuery(mapFn);\n\n  private obsStartPolling = (pollInterval: number) => {\n    this.currentObservable?.startPolling(pollInterval);\n  };\n\n  private obsStopPolling = () => {\n    this.currentObservable?.stopPolling();\n  };\n\n  private obsSubscribeToMore = <\n    TSubscriptionData = TData,\n    TSubscriptionVariables = TVariables\n  >(\n    options: SubscribeToMoreOptions<\n      TData,\n      TSubscriptionVariables,\n      TSubscriptionData\n    >\n  ) => this.currentObservable?.subscribeToMore(options);\n\n  private observableQueryFields() {\n    return {\n      variables: this.currentObservable?.variables,\n      refetch: this.obsRefetch,\n      fetchMore: this.obsFetchMore,\n      updateQuery: this.obsUpdateQuery,\n      startPolling: this.obsStartPolling,\n      stopPolling: this.obsStopPolling,\n      subscribeToMore: this.obsSubscribeToMore\n    } as ObservableQueryFields<TData, TVariables>;\n  }\n}\n","import '../../../utilities/globals';\n\nimport { useContext, useEffect, useReducer, useRef } from 'react';\nimport { DocumentNode } from 'graphql';\nimport { TypedDocumentNode } from '@graphql-typed-document-node/core';\n\nimport {\n  QueryHookOptions,\n  QueryDataOptions,\n  QueryTuple,\n  QueryResult,\n} from '../../types/types';\nimport { QueryData } from '../../data';\nimport { useDeepMemo } from './useDeepMemo';\nimport { OperationVariables } from '../../../core';\nimport { getApolloContext } from '../../context';\nimport { useAfterFastRefresh } from './useAfterFastRefresh';\n\nexport function useBaseQuery<TData = any, TVariables = OperationVariables>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: QueryHookOptions<TData, TVariables>,\n  lazy = false\n) {\n  const context = useContext(getApolloContext());\n  const [tick, forceUpdate] = useReducer(x => x + 1, 0);\n  const updatedOptions = options ? { ...options, query } : { query };\n\n  const queryDataRef = useRef<QueryData<TData, TVariables>>();\n  const queryData = queryDataRef.current || (\n    queryDataRef.current = new QueryData<TData, TVariables>({\n      options: updatedOptions as QueryDataOptions<TData, TVariables>,\n      context,\n      onNewData() {\n        if (!queryData.ssrInitiated()) {\n          // When new data is received from the `QueryData` object, we want to\n          // force a re-render to make sure the new data is displayed. We can't\n          // force that re-render if we're already rendering however so to be\n          // safe we'll trigger the re-render in a microtask. In case the\n          // component gets unmounted before this callback fires, we re-check\n          // queryDataRef.current.isMounted before calling forceUpdate().\n          Promise.resolve().then(() => queryDataRef.current && queryDataRef.current.isMounted && forceUpdate());\n        } else {\n          // If we're rendering on the server side we can force an update at\n          // any point.\n          forceUpdate();\n        }\n      }\n    })\n  );\n\n  queryData.setOptions(updatedOptions);\n  queryData.context = context;\n\n  // `onError` and `onCompleted` callback functions will not always have a\n  // stable identity, so we'll exclude them from the memoization key to\n  // prevent `afterExecute` from being triggered un-necessarily.\n  const memo = {\n    options: {\n      ...updatedOptions,\n      onError: void 0,\n      onCompleted: void 0\n    } as QueryHookOptions<TData, TVariables>,\n    context,\n    tick\n  };\n\n  const result = useDeepMemo(\n    () => (lazy ? queryData.executeLazy() : queryData.execute()),\n    memo\n  );\n\n  const queryResult = lazy\n    ? (result as QueryTuple<TData, TVariables>)[1]\n    : (result as QueryResult<TData, TVariables>);\n\n  if (__DEV__) {\n    // ensure we run an update after refreshing so that we reinitialize\n    useAfterFastRefresh(forceUpdate);\n  }\n\n  useEffect(() => {\n    return () => {\n      queryData.cleanup();\n      // this effect can run multiple times during a fast-refresh\n      // so make sure we clean up the ref\n      queryDataRef.current = void 0;\n    }\n  }, []);\n\n  useEffect(() => queryData.afterExecute({ lazy }), [\n    queryResult.loading,\n    queryResult.networkStatus,\n    queryResult.error,\n    queryResult.data,\n    queryData.currentObservable,\n  ]);\n\n  return result;\n}\n","import { useRef } from 'react';\nimport { equal } from '@wry/equality';\n\n/**\n * Memoize a result using deep equality. This hook has two advantages over\n * React.useMemo: it uses deep equality to compare memo keys, and it guarantees\n * that the memo function will only be called if the keys are unequal.\n * React.useMemo cannot be relied on to do this, since it is only a performance\n * optimization (see https://reactjs.org/docs/hooks-reference.html#usememo).\n */\nexport function useDeepMemo<TKey, TValue>(\n  memoFn: () => TValue,\n  key: TKey\n): TValue {\n  const ref = useRef<{ key: TKey; value: TValue }>();\n\n  if (!ref.current || !equal(key, ref.current.key)) {\n    ref.current = { key, value: memoFn() };\n  }\n\n  return ref.current.value;\n}\n","import '../../../utilities/globals';\nimport { useEffect, useRef } from \"react\";\n\n/**\n * This hook allows running a function only immediately after a react\n * fast refresh or live reload.\n *\n * Useful in order to ensure that we can reinitialize things that have been\n * disposed by cleanup functions in `useEffect`.\n * @param effectFn a function to run immediately after a fast refresh\n */\nexport function useAfterFastRefresh(effectFn: () => unknown) {\n  if (__DEV__) {\n    const didRefresh = useRef(false);\n    useEffect(() => {\n      return () => {\n        // Detect fast refresh, only runs multiple times in fast refresh\n        didRefresh.current = true;\n      };\n    }, []);\n\n    useEffect(() => {\n      if (didRefresh.current === true) {\n        // This block only runs after a fast refresh\n        didRefresh.current = false;\n        effectFn();\n      }\n    }, [])\n  }\n}\n","import { DocumentNode } from 'graphql';\nimport { TypedDocumentNode } from '@graphql-typed-document-node/core';\n\nimport { QueryHookOptions, QueryResult } from '../types/types';\nimport { useBaseQuery } from './utils/useBaseQuery';\nimport { OperationVariables } from '../../core';\n\nexport function useQuery<TData = any, TVariables = OperationVariables>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: QueryHookOptions<TData, TVariables>\n) {\n  return useBaseQuery<TData, TVariables>(query, options, false) as QueryResult<\n    TData,\n    TVariables\n  >;\n}\n"],"sourceRoot":""}